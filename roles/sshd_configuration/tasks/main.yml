---
- name: Gather needed facts
  setup:
    gather_subset:
      - '!all'
      - '!min'
      - env
  when: ansible_facts.env is not defined

- name: Set sshd options to enable
  set_fact:
    sshd: "{{ sshd_options | default({}, true) }}"

- name: Fail if root trying to block root access completely
  fail:
    msg: "Refusing to configure 'PermitRootLogin no' when connected as root."
  when:
    - "'SUDO_USER' not in ansible_facts.env"
    - "'PermitRootLogin' in sshd"
    - "sshd.PermitRootLogin == 'no'"

- name: Set sshd options to disable
  set_fact:
    sshd_disable: "{{ sshd_options_disable | default([], true) }}"

- name: Check sshd_config.d directory
  stat:
    path: /etc/ssh/sshd_config.d
  register: config_dir

- name: Set sshd configuration file
  set_fact:
    config_file: "{{ '/etc/ssh/sshd_config' if not config_dir.stat.exists else '/etc/ssh/sshd_config.d/0-local.conf' }}"

- name: Enable sshd configuration options
  lineinfile:
    path: "{{ config_file }}"
    regexp: '^(|#){{ item.key }} .*'
    line: '{{ item.key + " " + item.value }}'
    create: true
    mode: '0600'
    validate: /usr/sbin/sshd -tf %s
  register: enable_options
  loop: "{{ sshd | dict2items | select() | list }}"
  when: item.key not in sshd_disable

- name: Disable sshd configuration options
  replace:
    path: "{{ item.0 }}"
    regexp: '^({{ item.1 }} .*)'
    replace: '#\1'
    validate: /usr/sbin/sshd -tf %s
  register: disable_options
  loop: "{{ (['/etc/ssh/sshd_config'] + [config_file]) | unique | product(sshd_disable) | list }}"

- name: Reload sshd to apply configuration changes
  service:
    name: sshd
    state: reloaded
  when: enable_options is changed or
        disable_options is changed
