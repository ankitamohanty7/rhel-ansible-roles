---
- name: Check available package updates
  yum:
    name: '*'
    state: latest
    update_cache: true
  check_mode: true
  register: package_install
  changed_when: false

- name: Read list of available package updates (RHEL 7, part I)
  set_fact:
    el7_updates: "{{ el7_updates | default([]) + ['Updated: ' + item[0] + ' ' + item[1] | regex_replace(' from.*', '')] }}"
  loop: "{{ package_install.changes.updated }}"
  loop_control:
    label: "{{ item[0] }}"
  when:
    - ansible_facts.pkg_mgr == 'yum'
    - package_install.changes is defined

- name: Read list of available package updates (RHEL 7, part II)
  set_fact:
    el7_installs: "{{ el7_installs | default([]) + ['Installed: ' + item[0] + ' ' + item[1] | regex_replace(' from.*', '')] }}"
  loop: "{{ package_install.changes.installed }}"
  loop_control:
    label: "{{ item[0] }}"
  when:
    - ansible_facts.pkg_mgr == 'yum'
    - package_install.changes is defined

- name: Set list of available package updates (RHEL 7)
  set_fact:
    package_updates: "{{ (el7_updates + el7_installs | default([])) | sort | join('\n') }}"
  when:
    - ansible_facts.pkg_mgr == 'yum'
    - package_install.changes is defined

- name: Set list of available package updates
  set_fact:
    package_updates: "{{ package_install.results | sort | join('\n') }}"
  when:
    - ansible_facts.pkg_mgr == 'dnf'
    - 'Nothing to do' not in package_install.msg

- name: Display list of available package updates
  debug:
    var: package_updates
  when: package_updates is defined

- name: Create PDF report
  include_tasks: pdf.yml
  when:
    - system_update_report_pre_pdf | bool
    - package_updates is defined

- name: Notify about upcoming package updates
  environment:
    EMAIL_PDF: "{{ system_update_report_pre_pdf }}"
  script: send-notification '{{ hostvars[item].email | default(system_update_report_pre_default_recipient, true) }}' '{{ item }}' '{{ hostvars[item].package_updates }}'
  register: command_output
  delegate_to: localhost
  run_once: true
  become: false
  loop: "{{ ansible_play_batch }}"
  when: hostvars[item].package_updates is defined

- name: Display notification command debug output
  debug:
    msg: "{{ command_output.results | selectattr('item', 'equalto', inventory_hostname) | map(attribute='stdout') | first }}"
  when: hostvars[inventory_hostname].package_updates is defined

- name: Remove local PDF directory
  file:
    path: /tmp/.ansible.pdf
    state: absent
  register: command_output
  delegate_to: localhost
  run_once: true
  become: false
  when: system_update_report_pre_pdf | bool
