---
- name: Gather needed facts
  setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution_major_version
  when: ansible_facts.distribution_major_version is not defined

- name: Install mokutil package
  yum:
    name: mokutil
    state: present
  when: secure_boot_verify | bool

- name: Gather package facts
  package_facts:

- name: Check Secure Boot state
  command: mokutil --sb-state
  check_mode: false
  register: sb_state
  failed_when: false
  changed_when: false
  when:
    - "'mokutil' in ansible_facts.packages"
    - secure_boot_verify | bool

- name: Abort if Secure Boot not enabled
  fail:
    msg: "Secure Boot not enabled."
  when:
    - "'mokutil' in ansible_facts.packages"
    - secure_boot_verify | bool
    - "'Secure Boot enabled' not in sb_state.stdout"

- name: Install SELinux packages
  vars:
    selinux_package_lists:
      rhel7:
        - libselinux-python
        - libsemanage-python
        - policycoreutils-python
        - selinux-policy-targeted
        - setools-console
      default:
        - python3-libselinux
        - python3-libsemanage
        - policycoreutils-python-utils
        - selinux-policy-targeted
        - setools-console
    distro_id: "{{ 'rhel' + ansible_facts.distribution_major_version }}"
    package_set: "{{ 'default' if distro_id not in selinux_package_lists else distro_id }}"
    selinux_packages: "{{ selinux_package_lists[package_set] }}"
  yum:
    name: "{{ selinux_packages }}"
    state: present

- name: Gather package facts
  package_facts:

- name: Configure SELinux state
  ansible.posix.selinux:
    policy: targeted
    state: "{{ selinux }}"
  register: selinux_config
  when: "'libselinux-python' in ansible_facts.packages or
         'python3-libselinux' in ansible_facts.packages"

- name: Install crypto-policies-scripts package
  yum:
    name: crypto-policies-scripts
    state: present

- name: Gather package facts
  package_facts:

- name: Check current crypto policy
  command: update-crypto-policies --show
  check_mode: false
  register: current_crypto_policy
  changed_when: false
  when:
    - "'crypto-policies-scripts' in ansible_facts.packages"
    - ansible_facts.distribution_major_version|int >= 8

- name: Configure crypto policy
  command: update-crypto-policies --set {{ crypto_policy }}
  register: crypto_policy_config
  when:
    - ansible_facts.distribution_major_version|int >= 8
    - "'crypto-policies-scripts' in ansible_facts.packages"
    - current_crypto_policy.stdout != crypto_policy

- name: Install grubby package
  yum:
    name: grubby
    state: present
  when: ansible_facts.distribution_major_version|int >= 9

- name: Check kernel lockdown configuration
  vars:
    lockdown_param: "{{ 'lockdown=' + kernel_lockdown if kernel_lockdown != 'disabled' else 'lockdown' }}"
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX=.*("| ){{ lockdown_param }}(=| |")'
    state: absent
  check_mode: true
  register: lockdown_check
  changed_when: false
  when: ansible_facts.distribution_major_version|int >= 9

- name: Configure kernel lockdown
  command: >
    grubby
    --update-kernel=ALL
    --remove-args=lockdown
    "{{ '--args=lockdown=' + kernel_lockdown if kernel_lockdown != 'disabled' else '' }}"
  register: lockdown_config
  when:
    - ansible_facts.distribution_major_version|int >= 9
    - (kernel_lockdown == 'disabled' and lockdown_check.found != 0) or
      (kernel_lockdown != 'disabled' and lockdown_check.found == 0)

- name: Reboot system
  reboot:
  when: (selinux_config.reboot_required is defined and selinux_config.reboot_required) or
        crypto_policy_config is changed or
        lockdown_config is changed
