---
- name: Gather needed facts
  setup:
    gather_subset:
      - '!all'
      - '!min'
      - pkg_mgr
  when: ansible_facts.pkg_mgr is not defined

- name: Update all packages
  # noqa: package-latest
  yum:
    name: '*'
    update_cache: true
    state: latest
  register: package_install

- name: Set package update timestamp
  set_fact:
    patch_time: "{{ '%Y-%m-%d %H:%M:%S %Z' | strftime }}"
  when: system_update_display_updates | bool or
        system_update_email_report | bool

- name: Set updated packages (RHEL 7)
  vars:
    el7_installed: "{{ ['Installed: '] | product(package_install.changes.installed | default([])) | map('join') | list }}"
    el7_updated: "{{ ['Updated: '] | product(package_install.changes.updated | default([])) | map('join') | list }}"
    el7_removed: "{{ ['Removed: '] | product(package_install.changes.removed | default([])) | map('join') | list }}"
  set_fact:
    package_updates: "{{ (el7_installed + el7_updated + el7_removed) | sort }}"
  when:
    - ansible_facts.pkg_mgr == 'yum'
    - system_update_display_updates | bool or
      system_update_email_report | bool

- name: Set updated packages
  set_fact:
    package_updates: "{{ package_install.results | default([]) | sort }}"
  when:
    - ansible_facts.pkg_mgr == 'dnf'
    - system_update_display_updates | bool or
      system_update_email_report | bool

- name: Display list of updated packages
  vars:
    output_old: "{{ (package_updates | join('\n')).split('\n') }}"
    output_new: "{{ package_updates | join('\n') }}"
  debug:
    msg: "{{ output_new if ansible_version.full is version('2.11', '>=') else output_old }}"
  when:
    - system_update_display_updates | bool
    - package_updates | default(false)

- name: Install yum-utils package
  yum:
    name: yum-utils
    state: present
  when: system_update_reboot_policy == 'when_needed'

- name: Gather package facts
  package_facts:

- name: Check need for rebooting
  vars:
    plugin_opt: "{{ '--disableplugin=product-id,subscription-manager' if ansible_facts.pkg_mgr != 'yum' else '' }}"
  command: needs-restarting {{ plugin_opt }} -r
  check_mode: false
  register: needs_restarting
  failed_when: false
  changed_when: false
  when:
    - "'yum-utils' in ansible_facts.packages"
    - system_update_reboot_policy == 'when_needed'

- name: Reboot system
  reboot:
  register: system_reboot
  when: (system_update_reboot_policy == 'always') or
        (system_update_reboot_policy == 'when_updated' and package_install is changed) or
        (system_update_reboot_policy == 'when_needed' and
         needs_restarting.rc is defined and
         needs_restarting.rc != 0)

- name: Send email report
  include_tasks: report.yml
  when:
    - system_update_email_report | bool
    - package_updates | default(false)
